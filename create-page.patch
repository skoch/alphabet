From a21a044dd2122be4b17790c5d59533f33c642628 Mon Sep 17 00:00:00 2001
From: Stephen Koch <stephen.koch@gmail.com>
Date: Mon, 2 Jan 2017 03:08:46 -0500
Subject: [PATCH 1/2] createPage.js added, updated npm modules

---
 app.js                     |   4 +-
 createPage.js              | 121 +++++++++++++++++++++++++++++++++++++++++++++
 package.json               |   3 ++
 views/pages/_template.twig |  13 +++++
 4 files changed, 139 insertions(+), 2 deletions(-)
 create mode 100755 createPage.js
 create mode 100644 views/pages/_template.twig

diff --git a/app.js b/app.js
index d7f81a3..10d66fa 100644
--- a/app.js
+++ b/app.js
@@ -10,7 +10,7 @@ var auth = require('http-auth');
 // Pages
 var tableOfContents = require('./routes/table-of-contents');
 var styleguide = require('./routes/styleguide');
-// var examplePage = require('./routes/examplePage');
+// ~ dynamically generated ~ 0 ~

 var app = express();
 var basic;
@@ -47,7 +47,7 @@ app.use(express.static(path.join(__dirname, 'dist')));
 // Define/declare routes
 app.use('/', tableOfContents);
 app.use('/styleguide', styleguide);
-// app.use('/examplePage', examplePage);
+// ~ dynamically generated ~ 1 ~

 // catch 404 and forward to error handler
 app.use(function(req, res, next) {
diff --git a/createPage.js b/createPage.js
new file mode 100755
index 0000000..e09ec36
--- /dev/null
+++ b/createPage.js
@@ -0,0 +1,121 @@
+#!/usr/bin/env node
+/**
+ * createPage.js
+ * 1. Creates the necessary files from template files for a new page in the prototype
+ * 2. Updates `app.js` to have the new route
+ * 3. Updates `src/scss/index.scss` to import the new SCSS file
+ */
+const replace = require('replace-in-file');
+const fs = require('fs-extra');
+const cli = require('cli');
+
+cli.parse({
+    pagename: ['p', 'The name of the new page/module', 'string'],
+});
+
+/**
+ * Used by `copyFile` to find and replaces text in a file
+ *
+ * @param {String} newFilePath
+ * @param {Regex or String} regex
+ * @param {String} replacement
+ */
+function replaceInFile(newFilePath, regex, replacement) {
+    console.log('Starting replacement:', regex, replacement);
+    const options = {
+        files: newFilePath,
+        // Replacement to make (string or regex)
+        replace: regex,
+        with: replacement,
+    };
+
+    replace(options)
+        .then((changedFiles) => {
+            console.log('Modified files:', changedFiles.join(', '));
+        })
+        .catch((error) => {
+            throw error;
+        });
+}
+
+/**
+ * Copies a file to a new file/name
+ * Optionally, finds and replaces text in same file
+ *
+ * @param  {String} fileToCopy
+ * @param  {String} newFilePath
+ * @param  {Regex or String, optional} regex
+ * @param  {String, optional} replacement
+ * @return {Boolean}
+ */
+function copyFile(fileToCopy, newFilePath, regex, replacement) {
+    console.log('Starting copy:', fileToCopy);
+    fs.copy(fileToCopy, newFilePath, (err) => {
+        if (err) {
+            throw err;
+        }
+
+        if (regex && replacement) {
+            replaceInFile(newFilePath, regex, replacement);
+        }
+        console.log('Success:', newFilePath);
+        return true;
+    });
+}
+
+/**
+ * Inserts declaration of new page route
+ *
+ * @param {String} pagename
+ */
+function writeNewAppJs(pagename) {
+    fs.readFile('app.js', (err, data) => {
+        if (err) { throw err; }
+        const array = data.toString().split('\n');
+        let output = '';
+        for (let i = 0; i < array.length; i++) {
+            if (array[i] === '// ~ dynamically generated ~ 0 ~') {
+                output += `${array[i]}\nvar ${pagename} = require('./routes/${pagename}');\n`;
+            } else if (array[i] === '// ~ dynamically generated ~ 1 ~') {
+                output += `${array[i]}\napp.use('/${pagename}', ${pagename});\n`;
+            } else if (i === array.length - 1) {
+                output += `${array[i]}`;
+            } else {
+                output += `${array[i]}\n`;
+            }
+        }
+
+        // sk: write to TMP file
+        fs.appendFileSync('TMP', output);
+        console.log('Writing TMP app.js');
+
+        // sk: delete app.js // rename TMP to app.js
+        fs.unlink('app.js');
+        console.log('Deleting old app.js');
+        fs.renameSync('TMP', 'app.js');
+        console.log('Writing new app.js');
+    });
+}
+
+// main entry point
+cli.main((args, options) => {
+    if (options.pagename) {
+        const p = options.pagename;
+
+        // twig, scss, js controller, route
+        copyFile('views/pages/_template.twig', `views/pages/${p}.twig`);
+        copyFile('src/scss/_template.scss', `src/scss/_${p}.scss`, /classname/gi, p);
+        copyFile('src/js/pages/_template.js', `src/js/pages/${p}.js`, '=== name ===', `=== ${p} ===`);
+        copyFile('routes/_template.js', `routes/${p}.js`, /pagename/gi, p);
+
+        // create new app.js
+        writeNewAppJs(p);
+        // import the new SCSS
+        fs.appendFileSync('src/scss/index.scss', `@import "${p}"`);
+        console.log('Appended `@import` for new SCSS');
+
+        // `http://localhost:3000/${p}`
+    } else {
+        console.log('Use the -h flag to list options');
+    }
+});
diff --git a/package.json b/package.json
index c67b35e..85d10b5 100644
--- a/package.json
+++ b/package.json
@@ -28,9 +28,11 @@
   },
   "dependencies": {
     "body-parser": "~1.15.2",
+    "cli": "^1.0.1",
     "cookie-parser": "~1.4.3",
     "debug": "~2.2.0",
     "express": "~4.14.0",
+    "fs-extra": "^1.0.0",
     "http-auth": "^3.0.1",
     "jquery": "^3.1.1",
     "lodash": "^4.16.6",
@@ -38,6 +40,7 @@
     "morgan": "~1.7.0",
     "nodemon": "^1.11.0",
     "normalize-scss": "^6.0.0",
+    "replace-in-file": "^2.0.3",
     "serve-favicon": "~2.3.0",
     "signals": "^1.0.0",
     "twig": "^0.10.0"
diff --git a/views/pages/_template.twig b/views/pages/_template.twig
new file mode 100644
index 0000000..5845844
--- /dev/null
+++ b/views/pages/_template.twig
@@ -0,0 +1,13 @@
+{% extends 'layouts/layout.twig' %}
+
+{% block extras_header_code %}{% endblock %}
+
+{% block header %}{% endblock %}
+
+{% block content %}
+<h1>This is a blank page.</h1>
+{% endblock %}
+
+{% block footer %}{% endblock %}
+
+{% block extras_footer_code %}{% endblock %}

From a60d02205da1b4414d9cbf6f7afd7a1688ead0ea Mon Sep 17 00:00:00 2001
From: Stephen Koch <stephen.koch@gmail.com>
Date: Mon, 2 Jan 2017 12:03:00 -0500
Subject: [PATCH 2/2] Added optional flag to update the table of contents

---
 app.js                      |  2 ++
 createPage.js               | 51 ++++++++++++++++++++++++++++++++++++++++-----
 package.json                |  1 +
 routes/table-of-contents.js |  2 ++
 4 files changed, 51 insertions(+), 5 deletions(-)

diff --git a/app.js b/app.js
index 10d66fa..41db870 100644
--- a/app.js
+++ b/app.js
@@ -11,6 +11,7 @@ var auth = require('http-auth');
 var tableOfContents = require('./routes/table-of-contents');
 var styleguide = require('./routes/styleguide');
 // ~ dynamically generated ~ 0 ~
+// ~ end dynamically generated ~

 var app = express();
 var basic;
@@ -48,6 +49,7 @@ app.use(express.static(path.join(__dirname, 'dist')));
 app.use('/', tableOfContents);
 app.use('/styleguide', styleguide);
 // ~ dynamically generated ~ 1 ~
+// ~ end dynamically generated ~

 // catch 404 and forward to error handler
 app.use(function(req, res, next) {
diff --git a/createPage.js b/createPage.js
index e09ec36..b9945ff 100755
--- a/createPage.js
+++ b/createPage.js
@@ -4,13 +4,16 @@
  * 1. Creates the necessary files from template files for a new page in the prototype
  * 2. Updates `app.js` to have the new route
  * 3. Updates `src/scss/index.scss` to import the new SCSS file
+ * 4. Optionally add the new page to the Table of Contents page
  */
 const replace = require('replace-in-file');
 const fs = require('fs-extra');
 const cli = require('cli');
+const padStart = require('lodash.padstart');

 cli.parse({
     pagename: ['p', 'The name of the new page/module', 'string'],
+    index: ['i', 'Add to index?', 'on'],
 });

 /**
@@ -74,9 +77,9 @@ function writeNewAppJs(pagename) {
         const array = data.toString().split('\n');
         let output = '';
         for (let i = 0; i < array.length; i++) {
-            if (array[i] === '// ~ dynamically generated ~ 0 ~') {
+            if (array[i].trim() === '// ~ dynamically generated ~ 0 ~') {
                 output += `${array[i]}\nvar ${pagename} = require('./routes/${pagename}');\n`;
-            } else if (array[i] === '// ~ dynamically generated ~ 1 ~') {
+            } else if (array[i].trim() === '// ~ dynamically generated ~ 1 ~') {
                 output += `${array[i]}\napp.use('/${pagename}', ${pagename});\n`;
             } else if (i === array.length - 1) {
                 output += `${array[i]}`;
@@ -86,17 +89,52 @@ function writeNewAppJs(pagename) {
         }

         // sk: write to TMP file
-        fs.appendFileSync('TMP', output);
+        fs.appendFileSync('TMP-app', output);
         console.log('Writing TMP app.js');

         // sk: delete app.js // rename TMP to app.js
         fs.unlink('app.js');
         console.log('Deleting old app.js');
-        fs.renameSync('TMP', 'app.js');
+        fs.renameSync('TMP-app', 'app.js');
         console.log('Writing new app.js');
     });
 }

+/**
+ * Inserts new page into the table of contents
+ *
+ * @param {String} pagename
+ */
+function writeNewtableOfContentsJs(pagename) {
+    fs.readFile('routes/table-of-contents.js', (err, data) => {
+        if (err) { throw err; }
+        const array = data.toString().split('\n');
+        let output = '';
+        for (let i = 0; i < array.length; i++) {
+            if (array[i].trim() === '// ~ dynamically generated ~ 0 ~') {
+                const upperCasePagename = pagename.charAt(0).toUpperCase() + pagename.slice(1);
+                let route = `{ label: '${upperCasePagename}', url: '${pagename}' },\n`;
+                route = padStart(route, route.length + 16);
+                output += `${array[i]}\n${route}`;
+            } else if (i === array.length - 1) {
+                output += `${array[i]}`;
+            } else {
+                output += `${array[i]}\n`;
+            }
+        }
+
+        // sk: write to TMP file
+        fs.appendFileSync('TMP-toc', output);
+        console.log('Writing TMP routes/table-of-contents.js');
+
+        // sk: delete routes/table-of-contents.js // rename TMP to routes/table-of-contents.js
+        fs.unlink('routes/table-of-contents.js');
+        console.log('Deleting old routes/table-of-contents.js');
+        fs.renameSync('TMP-toc', 'routes/table-of-contents.js');
+        console.log('Writing new routes/table-of-contents.js');
+    });
+}
+
 // main entry point
 cli.main((args, options) => {
     if (options.pagename) {
@@ -114,8 +152,11 @@ cli.main((args, options) => {
         fs.appendFileSync('src/scss/index.scss', `@import "${p}"`);
         console.log('Appended `@import` for new SCSS');

+        if (options.index) {
+            writeNewtableOfContentsJs(p);
+        }
         // `http://localhost:3000/${p}`
     } else {
-        console.log('Use the -h flag to list options');
+        console.log('Use `-h` flag to list options');
     }
 });
diff --git a/package.json b/package.json
index 85d10b5..77b5f0f 100644
--- a/package.json
+++ b/package.json
@@ -36,6 +36,7 @@
     "http-auth": "^3.0.1",
     "jquery": "^3.1.1",
     "lodash": "^4.16.6",
+    "lodash.padstart": "^4.6.1",
     "moment": "^2.15.1",
     "morgan": "~1.7.0",
     "nodemon": "^1.11.0",
diff --git a/routes/table-of-contents.js b/routes/table-of-contents.js
index e04f435..b7f4475 100644
--- a/routes/table-of-contents.js
+++ b/routes/table-of-contents.js
@@ -16,6 +16,8 @@ router.get('/', function(req, res, next) {
                     label: 'Styleguide',
                     url: 'styleguide',
                 },
+                // ~ dynamically generated ~ 0 ~
+                // ~ end dynamically generated ~
             ],
         ],
     });
